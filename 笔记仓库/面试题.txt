1、浏览器内核有哪些？
Trident(IE内核)
Gecko(Firefox内核)
Presto（Opera内核）
webkit(Safari内核，chrome内核原型)

<meta http-equiv="X-UA_Compatible" content="IE=Ege" />

2、怎么解决css阻塞与js阻塞
JS的阻塞特性：所有浏览器在下载JS的时候，会阻止一切其他活动，比如有其他资源的下载，内容的呈现等等。直到JS下载、解析、执行完毕后才开始继续并行下载其他资源并呈现内容。
为了提高用户体验，新一代浏览器都支持并行下载JS，但是JS下载仍然会阻塞其他资源的下载（例如：图片、css文件等）。
由于浏览器为了防止出现JS修改DOM树，需要重新构建DOM树的情况下，所有就会出现其他下载和呈现。
嵌入JS会阻塞所有内容的呈现，而外部JS只会阻塞其后内容的显示，2种方式都会阻塞其他资源的下载。也就是说外部样式不会阻塞外部脚步的加载，但会阻塞外部脚步的执行。

CSS本来是可以并行下载的，在什么情况下会出现阻塞加载了（在测试观察中，IE6下css都是阻塞加载）
当css后面跟着嵌入的JS的时候，该css就会出现阻塞后面资源下载的情况。而当把嵌入JS放到css前面，就不会出现阻塞情况了。
根本原因：因为浏览器会维持Html中css和js的顺序，样式表必须在嵌入的JS执行前先加载、解析完。
而嵌入的JS会阻塞后面的资源加载，所以就会出现上面CSS阻塞下载的情况。

3、在浏览器地址栏输入一个url地址，回车后发生了什么？
1、首先在浏览器地址栏输入url
2、浏览器先查看浏览器缓存-系统缓存-路由器缓存，如果缓存中有，会直接在屏幕中显示页面内容。若没有，则跳到第三部操作。
3、在发送http请求前，需要域名解析(DNS解析)，解析获取相应的IP地址。
4、浏览器向服务器发起tcp链接，与浏览器建立tcp三次握手。
5、握手成功后，浏览器向服务器发送http请求，请求数据包。
6、服务器收到请求后，将数据返回浏览器。
7、浏览器收到http响应。
8、读取浏览器内容，浏览器渲染，解析html源码。
9、生成DOM树，解析css样式、JS交互。
10、客户端和服务器交互
11、Ajax查询


