1、什么是面向对象？
用对象的思想去写代码，
面向对象编程的特点：
抽象：抓住核心问题
封装：只能通过对象来访问方法
继承：从已有对象上继承出新的对象
多台：多对象的不同形态

继承：就是知道如何福永代码
多台也是一种形式


对象的组成
方法(行为,操作)：函数：过程、动态的
属性――变量状态、静态的

function 构造函数(){
	this.属性
}
构造函数.原型.方法 = function(){

};

使用：
var 对象1 = new 构造函数();
对象1.方法()
----------------------

创建一个面向对象
obj.name = "小明";
obj.showName = function(){
	alert(obj.name);
}

obj.showName();

构造函数：用来创建对象的函数叫做构造函数

工厂方式 构造函数
function CreatePerson(){
	this.name = name;
	this.showName = function(){
		alert(this.name);
	}
}

var p1=new CreatePerson('小明');
p1.showNmae();

原型：
概念：重写对象方法方法，让相同方法在内存中存在一份(提高性能)

类型 类比 css中class
普通函数类比 style

通过原型改写工厂函数
原则：形同的属性和方法加载在原型上

总结面向对象：
构造函数加属性，原型加方法

原型的优先级
var arr = [];
arr.number = 10; //类似style
Array.prototype.number = 20;
alert(arr.number);

面向对象的原则
>>普通方法变形 
尽量不要出现函数嵌套函数
可以有全局变量
把onload中不是赋值的语句放到单独的函数中
>>改成面向对象
全局变量就是属性
函数就是方法
Onload中创建对象 调用方法
改写this指向问题

拷贝继承
把一个对象的元素赋值给另一个对象
function extend(obj1,obj2){
	for(var attr in obj2){
		obj1[attr] = obj2[attr];
	}
}

类式继承
类：js中是没有类的概念的，把JS中的构造函数看做类
要做属性和方法继承的时候要分开继承
直接把父类的对象赋给子类的原型称为类式继承
Bbb.prototype.constructor = Bbb;//修正指向问题
call 纠正this

原型继承
var a = {
	name:'小明'
};
var b = cloneObj(a);
b.name = '小强';

// alert(b.name);
alert(a.name);
function cloneObj(obj){
	var F = function(){};
	F.protoType = obj;
	return new F();
}
拷贝继承：通用型的 有new或者无new都行
类式继承：new构造函数形式
原型继承：无new的形式


原型链
//原型链：实例对象与原型之间的链接,叫做原型链
//原型链的最外层 ： object.prototype

function Aaa(){
	this.num = 20;
}
Aaa.prototype.num = 10;
var a1 = new Aaa();
alert(a1.num);//=>10
/*
实例对象：a1
原型：Aaa.prototype
_proto_(隐式链接)

*/

hasOwnProperty:看是不是对象自身下面的属性
var arr = [];
arr.num = 10;
Array.prototype.num2 = 20;
alert(arr.hasOwnProperty('num2'));

--------------------
constructor : 查看对象的构造函数，或修正对象
如：
function Aaa(){}
Aaa.prototype.name = '小明';
Aaa.prototype.age = 20;

var a1 = new Aaa();
alert(a1.constructor);
--------------------
// instanceof : 对象与构造函数在原型链上是否有关系
function Aaa(){}
var a1 = new Aaa();
aleert( a1 instanceof Aaa );//=>true
aleert( a1 instanceof array );//=>false
aleert( a1 instanceof object );//true 任何对象最终都指向object


判断一个对象是不是数组
var arr = new ifArray();
alert(Object.prototype.toString.call(arr) == '[object Array]');

--------------------

用面向对象写一个数组去重
Array.prototype.unique=function(){
 for(var i=0;i<this.length;i++){
   for(var j=i+1;j<this.length;j++){
      if(this[i]==this[j]){
         this.splice(j--,1);
      }
    }		
 }
};

var arr=[23,5,7,8,4,5,6,7,5,5,5];

arr.unique();





